{\rtf1\ansi\ansicpg1252\cocoartf2638
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 CourierNewPSMT;}
{\colortbl;\red255\green255\blue255;\red25\green25\blue25;\red249\green249\blue249;}
{\*\expandedcolortbl;;\cssrgb\c12941\c12941\c12941;\cssrgb\c98039\c98039\c98039;}
\margl1440\margr1440\vieww21820\viewh13760\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
\
(base) Amrits-MacBook-Pro:tf-eks-demo amritsachdev$ terraform apply\
\
Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:\
  + create\
 <= read (data resources)\
\
Terraform will perform the following actions:\
\
  # data.aws_ami.eks-worker will be read during apply\
  # (config refers to values not yet known)\
 <= data "aws_ami" "eks-worker"  \{\
      + architecture          = (known after apply)\
      + arn                   = (known after apply)\
      + block_device_mappings = (known after apply)\
      + creation_date         = (known after apply)\
      + description           = (known after apply)\
      + ena_support           = (known after apply)\
      + hypervisor            = (known after apply)\
      + id                    = (known after apply)\
      + image_id              = (known after apply)\
      + image_location        = (known after apply)\
      + image_owner_alias     = (known after apply)\
      + image_type            = (known after apply)\
      + kernel_id             = (known after apply)\
      + most_recent           = true\
      + name                  = (known after apply)\
      + owner_id              = (known after apply)\
      + owners                = [\
          + "602401143452",\
        ]\
      + platform              = (known after apply)\
      + platform_details      = (known after apply)\
      + product_codes         = (known after apply)\
      + public                = (known after apply)\
      + ramdisk_id            = (known after apply)\
      + root_device_name      = (known after apply)\
      + root_device_type      = (known after apply)\
      + root_snapshot_id      = (known after apply)\
      + sriov_net_support     = (known after apply)\
      + state                 = (known after apply)\
      + state_reason          = (known after apply)\
      + tags                  = (known after apply)\
      + usage_operation       = (known after apply)\
      + virtualization_type   = (known after apply)\
\
      + filter \{\
          + name   = "name"\
          + values = [\
              + (known after apply),\
            ]\
        \}\
    \}\
\
  # aws_autoscaling_group.demo will be created\
  + resource "aws_autoscaling_group" "demo" \{\
      + arn                       = (known after apply)\
      + availability_zones        = (known after apply)\
      + default_cooldown          = (known after apply)\
      + desired_capacity          = 2\
      + force_delete              = false\
      + force_delete_warm_pool    = false\
      + health_check_grace_period = 300\
      + health_check_type         = (known after apply)\
      + id                        = (known after apply)\
      + launch_configuration      = (known after apply)\
      + max_size                  = 5\
      + metrics_granularity       = "1Minute"\
      + min_size                  = 2\
      + name                      = "terraform-eks-demo"\
      + name_prefix               = (known after apply)\
      + protect_from_scale_in     = false\
      + service_linked_role_arn   = (known after apply)\
      + vpc_zone_identifier       = (known after apply)\
      + wait_for_capacity_timeout = "10m"\
\
      + tag \{\
          + key                 = "Name"\
          + propagate_at_launch = true\
          + value               = "terraform-eks-demo"\
        \}\
      + tag \{\
          + key                 = "kubernetes.io/cluster/terraform-eks-demo"\
          + propagate_at_launch = true\
          + value               = "owned"\
        \}\
    \}\
\
  # aws_eks_cluster.demo-cluster will be created\
  + resource "aws_eks_cluster" "demo-cluster" \{\
      + arn                   = (known after apply)\
      + certificate_authority = (known after apply)\
      + created_at            = (known after apply)\
      + endpoint              = (known after apply)\
      + id                    = (known after apply)\
      + identity              = (known after apply)\
      + name                  = "terraform-eks-demo"\
      + platform_version      = (known after apply)\
      + role_arn              = (known after apply)\
      + status                = (known after apply)\
      + tags_all              = (known after apply)\
      + version               = (known after apply)\
\
      + kubernetes_network_config \{\
          + ip_family         = (known after apply)\
          + service_ipv4_cidr = (known after apply)\
        \}\
\
      + vpc_config \{\
          + cluster_security_group_id = (known after apply)\
          + endpoint_private_access   = false\
          + endpoint_public_access    = true\
          + public_access_cidrs       = (known after apply)\
          + security_group_ids        = (known after apply)\
          + subnet_ids                = (known after apply)\
          + vpc_id                    = (known after apply)\
        \}\
    \}\
\
  # aws_iam_instance_profile.demo-node will be created\
  + resource "aws_iam_instance_profile" "demo-node" \{\
      + arn         = (known after apply)\
      + create_date = (known after apply)\
      + id          = (known after apply)\
      + name        = "terraform-eks-demo"\
      + path        = "/"\
      + role        = "terraform-eks-demo-node"\
      + tags_all    = (known after apply)\
      + unique_id   = (known after apply)\
    \}\
\
  # aws_iam_role.demo-cluster-role will be created\
  + resource "aws_iam_role" "demo-cluster-role" \{\
      + arn                   = (known after apply)\
      + assume_role_policy    = jsonencode(\
            \{\
              + Statement = [\
                  + \{\
                      + Action    = "sts:AssumeRole"\
                      + Effect    = "Allow"\
                      + Principal = \{\
                          + Service = "eks.amazonaws.com"\
                        \}\
                    \},\
                ]\
              + Version   = "2012-10-17"\
            \}\
        )\
      + create_date           = (known after apply)\
      + force_detach_policies = false\
      + id                    = (known after apply)\
      + managed_policy_arns   = (known after apply)\
      + max_session_duration  = 3600\
      + name                  = "terraform-eks-demo-cluster"\
      + name_prefix           = (known after apply)\
      + path                  = "/"\
      + tags_all              = (known after apply)\
      + unique_id             = (known after apply)\
\
      + inline_policy \{\
          + name   = (known after apply)\
          + policy = (known after apply)\
        \}\
    \}\
\
  # aws_iam_role.demo-node will be created\
  + resource "aws_iam_role" "demo-node" \{\
      + arn                   = (known after apply)\
      + assume_role_policy    = jsonencode(\
            \{\
              + Statement = [\
                  + \{\
                      + Action    = "sts:AssumeRole"\
                      + Effect    = "Allow"\
                      + Principal = \{\
                          + Service = "ec2.amazonaws.com"\
                        \}\
                    \},\
                ]\
              + Version   = "2012-10-17"\
            \}\
        )\
      + create_date           = (known after apply)\
      + force_detach_policies = false\
      + id                    = (known after apply)\
      + managed_policy_arns   = (known after apply)\
      + max_session_duration  = 3600\
      + name                  = "terraform-eks-demo-node"\
      + name_prefix           = (known after apply)\
      + path                  = "/"\
      + tags_all              = (known after apply)\
      + unique_id             = (known after apply)\
\
      + inline_policy \{\
          + name   = (known after apply)\
          + policy = (known after apply)\
        \}\
    \}\
\
  # aws_iam_role_policy.demo-cluster-service-linked-role will be created\
  + resource "aws_iam_role_policy" "demo-cluster-service-linked-role" \{\
      + id     = (known after apply)\
      + name   = "service-linked-role"\
      + policy = jsonencode(\
            \{\
              + Statement = [\
                  + \{\
                      + Action   = "iam:CreateServiceLinkedRole"\
                      + Effect   = "Allow"\
                      + Resource = "arn:aws:iam::*:role/aws-service-role/*"\
                    \},\
                  + \{\
                      + Action   = [\
                          + "ec2:DescribeAccountAttributes",\
                        ]\
                      + Effect   = "Allow"\
                      + Resource = "*"\
                    \},\
                ]\
              + Version   = "2012-10-17"\
            \}\
        )\
      + role   = "terraform-eks-demo-cluster"\
    \}\
\
  # aws_iam_role_policy_attachment.demo-cluster-AmazonEKSClusterPolicy will be created\
  + resource "aws_iam_role_policy_attachment" "demo-cluster-AmazonEKSClusterPolicy" \{\
      + id         = (known after apply)\
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"\
      + role       = "terraform-eks-demo-cluster"\
    \}\
\
  # aws_iam_role_policy_attachment.demo-cluster-AmazonEKSServicePolicy will be created\
  + resource "aws_iam_role_policy_attachment" "demo-cluster-AmazonEKSServicePolicy" \{\
      + id         = (known after apply)\
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSServicePolicy"\
      + role       = "terraform-eks-demo-cluster"\
    \}\
\
  # aws_iam_role_policy_attachment.demo-node-AmazonEC2ContainerRegistryReadOnly will be created\
  + resource "aws_iam_role_policy_attachment" "demo-node-AmazonEC2ContainerRegistryReadOnly" \{\
      + id         = (known after apply)\
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"\
      + role       = "terraform-eks-demo-node"\
    \}\
\
  # aws_iam_role_policy_attachment.demo-node-AmazonEKSWorkerNodePolicy will be created\
  + resource "aws_iam_role_policy_attachment" "demo-node-AmazonEKSWorkerNodePolicy" \{\
      + id         = (known after apply)\
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"\
      + role       = "terraform-eks-demo-node"\
    \}\
\
  # aws_iam_role_policy_attachment.demo-node-AmazonEKS_CNI_Policy will be created\
  + resource "aws_iam_role_policy_attachment" "demo-node-AmazonEKS_CNI_Policy" \{\
      + id         = (known after apply)\
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"\
      + role       = "terraform-eks-demo-node"\
    \}\
\
  # aws_launch_configuration.demo will be created\
  + resource "aws_launch_configuration" "demo" \{\
      + arn                         = (known after apply)\
      + associate_public_ip_address = true\
      + ebs_optimized               = (known after apply)\
      + enable_monitoring           = true\
      + iam_instance_profile        = "terraform-eks-demo"\
      + id                          = (known after apply)\
      + image_id                    = (known after apply)\
      + instance_type               = "t2.medium"\
      + key_name                    = (known after apply)\
      + name                        = (known after apply)\
      + name_prefix                 = "terraform-eks-demo"\
      + security_groups             = (known after apply)\
      + user_data_base64            = (known after apply)\
\
      + ebs_block_device \{\
          + delete_on_termination = (known after apply)\
          + device_name           = (known after apply)\
          + encrypted             = (known after apply)\
          + iops                  = (known after apply)\
          + no_device             = (known after apply)\
          + snapshot_id           = (known after apply)\
          + throughput            = (known after apply)\
          + volume_size           = (known after apply)\
          + volume_type           = (known after apply)\
        \}\
\
      + metadata_options \{\
          + http_endpoint               = (known after apply)\
          + http_put_response_hop_limit = (known after apply)\
          + http_tokens                 = (known after apply)\
        \}\
\
      + root_block_device \{\
          + delete_on_termination = (known after apply)\
          + encrypted             = (known after apply)\
          + iops                  = (known after apply)\
          + throughput            = (known after apply)\
          + volume_size           = (known after apply)\
          + volume_type           = (known after apply)\
        \}\
    \}\
\
  # aws_security_group.demo-cluster-group will be created\
  + resource "aws_security_group" "demo-cluster-group" \{\
      + arn                    = (known after apply)\
      + description            = "Cluster communication with worker nodes"\
      + egress                 = [\
          + \{\
              + cidr_blocks      = [\
                  + "0.0.0.0/0",\
                ]\
              + description      = ""\
              + from_port        = 0\
              + ipv6_cidr_blocks = []\
              + prefix_list_ids  = []\
              + protocol         = "-1"\
              + security_groups  = []\
              + self             = false\
              + to_port          = 0\
            \},\
        ]\
      + id                     = (known after apply)\
      + ingress                = (known after apply)\
      + name                   = "terraform-eks-demo-cluster"\
      + name_prefix            = (known after apply)\
      + owner_id               = (known after apply)\
      + revoke_rules_on_delete = false\
      + tags                   = \{\
          + "Name" = "terraform-eks-demo"\
        \}\
      + tags_all               = \{\
          + "Name" = "terraform-eks-demo"\
        \}\
      + vpc_id                 = (known after apply)\
    \}\
\
  # aws_security_group.demo-node-wrkgrp will be created\
  + resource "aws_security_group" "demo-node-wrkgrp" \{\
      + arn                    = (known after apply)\
      + description            = "Security group for all nodes in the cluster"\
      + egress                 = [\
          + \{\
              + cidr_blocks      = [\
                  + "0.0.0.0/0",\
                ]\
              + description      = ""\
              + from_port        = 0\
              + ipv6_cidr_blocks = []\
              + prefix_list_ids  = []\
              + protocol         = "-1"\
              + security_groups  = []\
              + self             = false\
              + to_port          = 0\
            \},\
        ]\
      + id                     = (known after apply)\
      + ingress                = (known after apply)\
      + name                   = "terraform-eks-demo-node"\
      + name_prefix            = (known after apply)\
      + owner_id               = (known after apply)\
      + revoke_rules_on_delete = false\
      + tags                   = \{\
          + "Name"                                     = "terraform-eks-demo-node"\
          + "kubernetes.io/cluster/terraform-eks-demo" = "owned"\
        \}\
      + tags_all               = \{\
          + "Name"                                     = "terraform-eks-demo-node"\
          + "kubernetes.io/cluster/terraform-eks-demo" = "owned"\
        \}\
      + vpc_id                 = (known after apply)\
    \}\
\
  # aws_security_group_rule.demo-cluster-ingress-node-https will be created\
  + resource "aws_security_group_rule" "demo-cluster-ingress-node-https" \{\
      + description              = "Allow pods to communicate with the cluster API Server"\
      + from_port                = 443\
      + id                       = (known after apply)\
      + protocol                 = "tcp"\
      + security_group_id        = (known after apply)\
      + self                     = false\
      + source_security_group_id = (known after apply)\
      + to_port                  = 443\
      + type                     = "ingress"\
    \}\
\
  # aws_security_group_rule.demo-cluster-ingress-workstation-https will be created\
  + resource "aws_security_group_rule" "demo-cluster-ingress-workstation-https" \{\
      + cidr_blocks              = [\
          + "67.169.33.146/32",\
        ]\
      + description              = "Allow workstation to communicate with the cluster API Server"\
      + from_port                = 443\
      + id                       = (known after apply)\
      + protocol                 = "tcp"\
      + security_group_id        = (known after apply)\
      + self                     = false\
      + source_security_group_id = (known after apply)\
      + to_port                  = 443\
      + type                     = "ingress"\
    \}\
\
  # aws_security_group_rule.demo-node-ingress-cluster will be created\
  + resource "aws_security_group_rule" "demo-node-ingress-cluster" \{\
      + description              = "Allow worker Kubelets and pods to receive communication from the cluster control plane"\
      + from_port                = 1025\
      + id                       = (known after apply)\
      + protocol                 = "tcp"\
      + security_group_id        = (known after apply)\
      + self                     = false\
      + source_security_group_id = (known after apply)\
      + to_port                  = 65535\
      + type                     = "ingress"\
    \}\
\
  # aws_security_group_rule.demo-node-ingress-self will be created\
  + resource "aws_security_group_rule" "demo-node-ingress-self" \{\
      + description              = "Allow node to communicate with each other"\
      + from_port                = 0\
      + id                       = (known after apply)\
      + protocol                 = "-1"\
      + security_group_id        = (known after apply)\
      + self                     = false\
      + source_security_group_id = (known after apply)\
      + to_port                  = 65535\
      + type                     = "ingress"\
    \}\
\
  # module.vpc.aws_internet_gateway.this[0] will be created\
  + resource "aws_internet_gateway" "this" \{\
      + arn      = (known after apply)\
      + id       = (known after apply)\
      + owner_id = (known after apply)\
      + tags     = \{\
          + "Name"                                     = "terraform-eks-demo-node"\
          + "kubernetes.io/cluster/terraform-eks-demo" = "shared"\
        \}\
      + tags_all = \{\
          + "Name"                                     = "terraform-eks-demo-node"\
          + "kubernetes.io/cluster/terraform-eks-demo" = "shared"\
        \}\
      + vpc_id   = (known after apply)\
    \}\
\
  # module.vpc.aws_route.public_internet_gateway[0] will be created\
  + resource "aws_route" "public_internet_gateway" \{\
      + destination_cidr_block = "0.0.0.0/0"\
      + gateway_id             = (known after apply)\
      + id                     = (known after apply)\
      + instance_id            = (known after apply)\
      + instance_owner_id      = (known after apply)\
      + network_interface_id   = (known after apply)\
      + origin                 = (known after apply)\
      + route_table_id         = (known after apply)\
      + state                  = (known after apply)\
\
      + timeouts \{\
          + create = "5m"\
        \}\
    \}\
\
  # module.vpc.aws_route_table.private[0] will be created\
  + resource "aws_route_table" "private" \{\
      + arn              = (known after apply)\
      + id               = (known after apply)\
      + owner_id         = (known after apply)\
      + propagating_vgws = (known after apply)\
      + route            = (known after apply)\
      + tags             = \{\
          + "Name"                                     = "terraform-eks-demo-node"\
          + "kubernetes.io/cluster/terraform-eks-demo" = "shared"\
        \}\
      + tags_all         = \{\
          + "Name"                                     = "terraform-eks-demo-node"\
          + "kubernetes.io/cluster/terraform-eks-demo" = "shared"\
        \}\
      + vpc_id           = (known after apply)\
    \}\
\
  # module.vpc.aws_route_table.private[1] will be created\
  + resource "aws_route_table" "private" \{\
      + arn              = (known after apply)\
      + id               = (known after apply)\
      + owner_id         = (known after apply)\
      + propagating_vgws = (known after apply)\
      + route            = (known after apply)\
      + tags             = \{\
          + "Name"                                     = "terraform-eks-demo-node"\
          + "kubernetes.io/cluster/terraform-eks-demo" = "shared"\
        \}\
      + tags_all         = \{\
          + "Name"                                     = "terraform-eks-demo-node"\
          + "kubernetes.io/cluster/terraform-eks-demo" = "shared"\
        \}\
      + vpc_id           = (known after apply)\
    \}\
\
  # module.vpc.aws_route_table.private[2] will be created\
  + resource "aws_route_table" "private" \{\
      + arn              = (known after apply)\
      + id               = (known after apply)\
      + owner_id         = (known after apply)\
      + propagating_vgws = (known after apply)\
      + route            = (known after apply)\
      + tags             = \{\
          + "Name"                                     = "terraform-eks-demo-node"\
          + "kubernetes.io/cluster/terraform-eks-demo" = "shared"\
        \}\
      + tags_all         = \{\
          + "Name"                                     = "terraform-eks-demo-node"\
          + "kubernetes.io/cluster/terraform-eks-demo" = "shared"\
        \}\
      + vpc_id           = (known after apply)\
    \}\
\
  # module.vpc.aws_route_table.public[0] will be created\
  + resource "aws_route_table" "public" \{\
      + arn              = (known after apply)\
      + id               = (known after apply)\
      + owner_id         = (known after apply)\
      + propagating_vgws = (known after apply)\
      + route            = (known after apply)\
      + tags             = \{\
          + "Name"                                     = "terraform-eks-demo-node"\
          + "kubernetes.io/cluster/terraform-eks-demo" = "shared"\
        \}\
      + tags_all         = \{\
          + "Name"                                     = "terraform-eks-demo-node"\
          + "kubernetes.io/cluster/terraform-eks-demo" = "shared"\
        \}\
      + vpc_id           = (known after apply)\
    \}\
\
  # module.vpc.aws_route_table_association.private[0] will be created\
  + resource "aws_route_table_association" "private" \{\
      + id             = (known after apply)\
      + route_table_id = (known after apply)\
      + subnet_id      = (known after apply)\
    \}\
\
  # module.vpc.aws_route_table_association.private[1] will be created\
  + resource "aws_route_table_association" "private" \{\
      + id             = (known after apply)\
      + route_table_id = (known after apply)\
      + subnet_id      = (known after apply)\
    \}\
\
  # module.vpc.aws_route_table_association.private[2] will be created\
  + resource "aws_route_table_association" "private" \{\
      + id             = (known after apply)\
      + route_table_id = (known after apply)\
      + subnet_id      = (known after apply)\
    \}\
\
  # module.vpc.aws_route_table_association.public[0] will be created\
  + resource "aws_route_table_association" "public" \{\
      + id             = (known after apply)\
      + route_table_id = (known after apply)\
      + subnet_id      = (known after apply)\
    \}\
\
  # module.vpc.aws_route_table_association.public[1] will be created\
  + resource "aws_route_table_association" "public" \{\
      + id             = (known after apply)\
      + route_table_id = (known after apply)\
      + subnet_id      = (known after apply)\
    \}\
\
  # module.vpc.aws_route_table_association.public[2] will be created\
  + resource "aws_route_table_association" "public" \{\
      + id             = (known after apply)\
      + route_table_id = (known after apply)\
      + subnet_id      = (known after apply)\
    \}\
\
  # module.vpc.aws_subnet.private[0] will be created\
  + resource "aws_subnet" "private" \{\
      + arn                                            = (known after apply)\
      + assign_ipv6_address_on_creation                = false\
      + availability_zone                              = "us-east-1a"\
      + availability_zone_id                           = (known after apply)\
      + cidr_block                                     = "10.0.1.0/24"\
      + enable_dns64                                   = false\
      + enable_resource_name_dns_a_record_on_launch    = false\
      + enable_resource_name_dns_aaaa_record_on_launch = false\
      + id                                             = (known after apply)\
      + ipv6_cidr_block_association_id                 = (known after apply)\
      + ipv6_native                                    = false\
      + map_public_ip_on_launch                        = false\
      + owner_id                                       = (known after apply)\
      + private_dns_hostname_type_on_launch            = (known after apply)\
      + tags                                           = \{\
          + "Name"                                     = "terraform-eks-demo-node"\
          + "kubernetes.io/cluster/terraform-eks-demo" = "shared"\
        \}\
      + tags_all                                       = \{\
          + "Name"                                     = "terraform-eks-demo-node"\
          + "kubernetes.io/cluster/terraform-eks-demo" = "shared"\
        \}\
      + vpc_id                                         = (known after apply)\
    \}\
\
  # module.vpc.aws_subnet.private[1] will be created\
  + resource "aws_subnet" "private" \{\
      + arn                                            = (known after apply)\
      + assign_ipv6_address_on_creation                = false\
      + availability_zone                              = "us-east-1b"\
      + availability_zone_id                           = (known after apply)\
      + cidr_block                                     = "10.0.2.0/24"\
      + enable_dns64                                   = false\
      + enable_resource_name_dns_a_record_on_launch    = false\
      + enable_resource_name_dns_aaaa_record_on_launch = false\
      + id                                             = (known after apply)\
      + ipv6_cidr_block_association_id                 = (known after apply)\
      + ipv6_native                                    = false\
      + map_public_ip_on_launch                        = false\
      + owner_id                                       = (known after apply)\
      + private_dns_hostname_type_on_launch            = (known after apply)\
      + tags                                           = \{\
          + "Name"                                     = "terraform-eks-demo-node"\
          + "kubernetes.io/cluster/terraform-eks-demo" = "shared"\
        \}\
      + tags_all                                       = \{\
          + "Name"                                     = "terraform-eks-demo-node"\
          + "kubernetes.io/cluster/terraform-eks-demo" = "shared"\
        \}\
      + vpc_id                                         = (known after apply)\
    \}\
\
  # module.vpc.aws_subnet.private[2] will be created\
  + resource "aws_subnet" "private" \{\
      + arn                                            = (known after apply)\
      + assign_ipv6_address_on_creation                = false\
      + availability_zone                              = "us-east-1c"\
      + availability_zone_id                           = (known after apply)\
      + cidr_block                                     = "10.0.3.0/24"\
      + enable_dns64                                   = false\
      + enable_resource_name_dns_a_record_on_launch    = false\
      + enable_resource_name_dns_aaaa_record_on_launch = false\
      + id                                             = (known after apply)\
      + ipv6_cidr_block_association_id                 = (known after apply)\
      + ipv6_native                                    = false\
      + map_public_ip_on_launch                        = false\
      + owner_id                                       = (known after apply)\
      + private_dns_hostname_type_on_launch            = (known after apply)\
      + tags                                           = \{\
          + "Name"                                     = "terraform-eks-demo-node"\
          + "kubernetes.io/cluster/terraform-eks-demo" = "shared"\
        \}\
      + tags_all                                       = \{\
          + "Name"                                     = "terraform-eks-demo-node"\
          + "kubernetes.io/cluster/terraform-eks-demo" = "shared"\
        \}\
      + vpc_id                                         = (known after apply)\
    \}\
\
  # module.vpc.aws_subnet.public[0] will be created\
  + resource "aws_subnet" "public" \{\
      + arn                                            = (known after apply)\
      + assign_ipv6_address_on_creation                = false\
      + availability_zone                              = "us-east-1a"\
      + availability_zone_id                           = (known after apply)\
      + cidr_block                                     = "10.0.101.0/24"\
      + enable_dns64                                   = false\
      + enable_resource_name_dns_a_record_on_launch    = false\
      + enable_resource_name_dns_aaaa_record_on_launch = false\
      + id                                             = (known after apply)\
      + ipv6_cidr_block_association_id                 = (known after apply)\
      + ipv6_native                                    = false\
      + map_public_ip_on_launch                        = true\
      + owner_id                                       = (known after apply)\
      + private_dns_hostname_type_on_launch            = (known after apply)\
      + tags                                           = \{\
          + "Name"                                     = "terraform-eks-demo-node"\
          + "kubernetes.io/cluster/terraform-eks-demo" = "shared"\
        \}\
      + tags_all                                       = \{\
          + "Name"                                     = "terraform-eks-demo-node"\
          + "kubernetes.io/cluster/terraform-eks-demo" = "shared"\
        \}\
      + vpc_id                                         = (known after apply)\
    \}\
\
  # module.vpc.aws_subnet.public[1] will be created\
  + resource "aws_subnet" "public" \{\
      + arn                                            = (known after apply)\
      + assign_ipv6_address_on_creation                = false\
      + availability_zone                              = "us-east-1b"\
      + availability_zone_id                           = (known after apply)\
      + cidr_block                                     = "10.0.102.0/24"\
      + enable_dns64                                   = false\
      + enable_resource_name_dns_a_record_on_launch    = false\
      + enable_resource_name_dns_aaaa_record_on_launch = false\
      + id                                             = (known after apply)\
      + ipv6_cidr_block_association_id                 = (known after apply)\
      + ipv6_native                                    = false\
      + map_public_ip_on_launch                        = true\
      + owner_id                                       = (known after apply)\
      + private_dns_hostname_type_on_launch            = (known after apply)\
      + tags                                           = \{\
          + "Name"                                     = "terraform-eks-demo-node"\
          + "kubernetes.io/cluster/terraform-eks-demo" = "shared"\
        \}\
      + tags_all                                       = \{\
          + "Name"                                     = "terraform-eks-demo-node"\
          + "kubernetes.io/cluster/terraform-eks-demo" = "shared"\
        \}\
      + vpc_id                                         = (known after apply)\
    \}\
\
  # module.vpc.aws_subnet.public[2] will be created\
  + resource "aws_subnet" "public" \{\
      + arn                                            = (known after apply)\
      + assign_ipv6_address_on_creation                = false\
      + availability_zone                              = "us-east-1c"\
      + availability_zone_id                           = (known after apply)\
      + cidr_block                                     = "10.0.103.0/24"\
      + enable_dns64                                   = false\
      + enable_resource_name_dns_a_record_on_launch    = false\
      + enable_resource_name_dns_aaaa_record_on_launch = false\
      + id                                             = (known after apply)\
      + ipv6_cidr_block_association_id                 = (known after apply)\
      + ipv6_native                                    = false\
      + map_public_ip_on_launch                        = true\
      + owner_id                                       = (known after apply)\
      + private_dns_hostname_type_on_launch            = (known after apply)\
      + tags                                           = \{\
          + "Name"                                     = "terraform-eks-demo-node"\
          + "kubernetes.io/cluster/terraform-eks-demo" = "shared"\
        \}\
      + tags_all                                       = \{\
          + "Name"                                     = "terraform-eks-demo-node"\
          + "kubernetes.io/cluster/terraform-eks-demo" = "shared"\
        \}\
      + vpc_id                                         = (known after apply)\
    \}\
\
  # module.vpc.aws_vpc.this[0] will be created\
  + resource "aws_vpc" "this" \{\
      + arn                                  = (known after apply)\
      + assign_generated_ipv6_cidr_block     = false\
      + cidr_block                           = "10.0.0.0/16"\
      + default_network_acl_id               = (known after apply)\
      + default_route_table_id               = (known after apply)\
      + default_security_group_id            = (known after apply)\
      + dhcp_options_id                      = (known after apply)\
      + enable_classiclink                   = (known after apply)\
      + enable_classiclink_dns_support       = (known after apply)\
      + enable_dns_hostnames                 = false\
      + enable_dns_support                   = true\
      + id                                   = (known after apply)\
      + instance_tenancy                     = "default"\
      + ipv6_association_id                  = (known after apply)\
      + ipv6_cidr_block                      = (known after apply)\
      + ipv6_cidr_block_network_border_group = (known after apply)\
      + main_route_table_id                  = (known after apply)\
      + owner_id                             = (known after apply)\
      + tags                                 = \{\
          + "Name"                                     = "terraform-eks-demo-node"\
          + "kubernetes.io/cluster/terraform-eks-demo" = "shared"\
        \}\
      + tags_all                             = \{\
          + "Name"                                     = "terraform-eks-demo-node"\
          + "kubernetes.io/cluster/terraform-eks-demo" = "shared"\
        \}\
    \}\
\
Plan: 37 to add, 0 to change, 0 to destroy.\
\
Changes to Outputs:\
  + config-map-aws-auth = (known after apply)\
  + kubeconfig          = (known after apply)\
\
Do you want to perform these actions?\
  Terraform will perform the actions described above.\
  Only 'yes' will be accepted to approve.\
\
  Enter a value: yes\
\
aws_iam_role.demo-node: Creating...\
aws_iam_role.demo-cluster-role: Creating...\
module.vpc.aws_vpc.this[0]: Creating...\
aws_iam_role.demo-cluster-role: Creation complete after 3s [id=terraform-eks-demo-cluster]\
aws_iam_role.demo-node: Creation complete after 3s [id=terraform-eks-demo-node]\
aws_iam_role_policy_attachment.demo-node-AmazonEKS_CNI_Policy: Creating...\
aws_iam_role_policy_attachment.demo-cluster-AmazonEKSServicePolicy: Creating...\
aws_iam_instance_profile.demo-node: Creating...\
aws_iam_role_policy.demo-cluster-service-linked-role: Creating...\
aws_iam_role_policy_attachment.demo-cluster-AmazonEKSClusterPolicy: Creating...\
aws_iam_role_policy_attachment.demo-node-AmazonEKSWorkerNodePolicy: Creating...\
aws_iam_role_policy_attachment.demo-node-AmazonEC2ContainerRegistryReadOnly: Creating...\
aws_iam_role_policy.demo-cluster-service-linked-role: Creation complete after 1s [id=terraform-eks-demo-cluster:service-linked-role]\
aws_iam_role_policy_attachment.demo-node-AmazonEKSWorkerNodePolicy: Creation complete after 1s [id=terraform-eks-demo-node-20220623052011306900000001]\
aws_iam_role_policy_attachment.demo-node-AmazonEKS_CNI_Policy: Creation complete after 1s [id=terraform-eks-demo-node-20220623052011316600000004]\
aws_iam_role_policy_attachment.demo-cluster-AmazonEKSServicePolicy: Creation complete after 1s [id=terraform-eks-demo-cluster-20220623052011308000000002]\
aws_iam_role_policy_attachment.demo-node-AmazonEC2ContainerRegistryReadOnly: Creation complete after 1s [id=terraform-eks-demo-node-20220623052011313000000003]\
aws_iam_role_policy_attachment.demo-cluster-AmazonEKSClusterPolicy: Creation complete after 1s [id=terraform-eks-demo-cluster-20220623052011751500000005]\
aws_iam_instance_profile.demo-node: Creation complete after 1s [id=terraform-eks-demo]\
module.vpc.aws_vpc.this[0]: Creation complete after 5s [id=vpc-0c8a016eedbeba2f5]\
module.vpc.aws_route_table.private[2]: Creating...\
module.vpc.aws_route_table.private[0]: Creating...\
module.vpc.aws_subnet.private[1]: Creating...\
module.vpc.aws_subnet.private[0]: Creating...\
module.vpc.aws_route_table.private[1]: Creating...\
module.vpc.aws_subnet.private[2]: Creating...\
module.vpc.aws_subnet.public[1]: Creating...\
module.vpc.aws_route_table.public[0]: Creating...\
aws_security_group.demo-cluster-group: Creating...\
aws_security_group.demo-node-wrkgrp: Creating...\
module.vpc.aws_route_table.public[0]: Creation complete after 2s [id=rtb-03297dfeb941a571d]\
module.vpc.aws_route_table.private[2]: Creation complete after 2s [id=rtb-0a73ba4121d003a46]\
module.vpc.aws_route_table.private[1]: Creation complete after 2s [id=rtb-041aa5bca7ecebde0]\
module.vpc.aws_internet_gateway.this[0]: Creating...\
module.vpc.aws_subnet.public[0]: Creating...\
module.vpc.aws_subnet.public[2]: Creating...\
module.vpc.aws_subnet.private[1]: Creation complete after 2s [id=subnet-0e2615fb99e78893f]\
module.vpc.aws_subnet.private[2]: Creation complete after 2s [id=subnet-0202a16ed371393bd]\
module.vpc.aws_subnet.private[0]: Creation complete after 2s [id=subnet-0b94502a615b70736]\
module.vpc.aws_route_table.private[0]: Creation complete after 3s [id=rtb-05cf8d9b9ce4d545d]\
module.vpc.aws_route_table_association.private[0]: Creating...\
module.vpc.aws_route_table_association.private[1]: Creating...\
module.vpc.aws_route_table_association.private[2]: Creating...\
module.vpc.aws_internet_gateway.this[0]: Creation complete after 2s [id=igw-025939ee90a0180ec]\
module.vpc.aws_route.public_internet_gateway[0]: Creating...\
module.vpc.aws_route_table_association.private[2]: Creation complete after 1s [id=rtbassoc-07d7cd9b6ce9a810a]\
module.vpc.aws_route_table_association.private[0]: Creation complete after 1s [id=rtbassoc-0bce75891aab29e3e]\
module.vpc.aws_route_table_association.private[1]: Creation complete after 1s [id=rtbassoc-0db4007e1e953a230]\
module.vpc.aws_route.public_internet_gateway[0]: Creation complete after 2s [id=r-rtb-03297dfeb941a571d1080289494]\
aws_security_group.demo-cluster-group: Creation complete after 6s [id=sg-0f1554018e29d658c]\
aws_security_group_rule.demo-cluster-ingress-workstation-https: Creating...\
aws_security_group.demo-node-wrkgrp: Creation complete after 6s [id=sg-0a111693afbc4896a]\
aws_security_group_rule.demo-node-ingress-self: Creating...\
aws_security_group_rule.demo-node-ingress-cluster: Creating...\
aws_security_group_rule.demo-cluster-ingress-node-https: Creating...\
aws_security_group_rule.demo-node-ingress-self: Creation complete after 2s [id=sgrule-3803045015]\
aws_security_group_rule.demo-cluster-ingress-workstation-https: Creation complete after 2s [id=sgrule-180902939]\
module.vpc.aws_subnet.public[1]: Still creating... [10s elapsed]\
aws_security_group_rule.demo-cluster-ingress-node-https: Creation complete after 5s [id=sgrule-788055300]\
aws_security_group_rule.demo-node-ingress-cluster: Creation complete after 5s [id=sgrule-3470931504]\
module.vpc.aws_subnet.public[0]: Still creating... [10s elapsed]\
module.vpc.aws_subnet.public[2]: Still creating... [10s elapsed]\
module.vpc.aws_subnet.public[1]: Creation complete after 13s [id=subnet-0638bcf9d265bb2b7]\
module.vpc.aws_subnet.public[2]: Creation complete after 18s [id=subnet-0140b5483cf453118]\
module.vpc.aws_subnet.public[0]: Creation complete after 18s [id=subnet-096ece98734e6be18]\
module.vpc.aws_route_table_association.public[2]: Creating...\
module.vpc.aws_route_table_association.public[0]: Creating...\
module.vpc.aws_route_table_association.public[1]: Creating...\
aws_eks_cluster.demo-cluster: Creating...\
module.vpc.aws_route_table_association.public[1]: Creation complete after 2s [id=rtbassoc-0690f3f29fb571042]\
module.vpc.aws_route_table_association.public[2]: Creation complete after 2s [id=rtbassoc-053be37fda91ac8f7]\
module.vpc.aws_route_table_association.public[0]: Creation complete after 2s [id=rtbassoc-0ab40dcf0c4eced8a]\
aws_eks_cluster.demo-cluster: Still creating... [10s elapsed]\
aws_eks_cluster.demo-cluster: Still creating... [20s elapsed]\
aws_eks_cluster.demo-cluster: Still creating... [30s elapsed]\
aws_eks_cluster.demo-cluster: Still creating... [40s elapsed]\
\'85\'85\
\
aws_eks_cluster.demo-cluster: Still creating... [7m50s elapsed]\
aws_eks_cluster.demo-cluster: Still creating... [8m0s elapsed]\
aws_eks_cluster.demo-cluster: Still creating... [8m10s elapsed]\
aws_eks_cluster.demo-cluster: Still creating... [8m20s elapsed]\
aws_eks_cluster.demo-cluster: Still creating... [8m30s elapsed]\
aws_eks_cluster.demo-cluster: Creation complete after 8m39s [id=terraform-eks-demo]\
data.aws_ami.eks-worker: Reading...\
data.aws_ami.eks-worker: Read complete after 1s [id=ami-04da90af795232a44]\
aws_launch_configuration.demo: Creating...\
aws_launch_configuration.demo: Creation complete after 2s [id=terraform-eks-demo20220623052912814600000006]\
aws_autoscaling_group.demo: Creating..\
\
data.aws_ami.eks-worker: Reading...\
data.aws_ami.eks-worker: Read complete after 1s [id=ami-04da90af795232a44]\
aws_launch_configuration.demo: Creating...\
aws_launch_configuration.demo: Creation complete after 2s [id=terraform-eks-demo20220623052912814600000006]\
aws_autoscaling_group.demo: Creating...\
aws_autoscaling_group.demo: Still creating... [10s elapsed]\
aws_autoscaling_group.demo: Still creating... [20s elapsed]\
aws_autoscaling_group.demo: Still creating... [30s elapsed]\
aws_autoscaling_group.demo: Still creating... [40s elapsed]\
aws_autoscaling_group.demo: Creation complete after 41s [id=terraform-eks-demo]\
\
Apply complete! Resources: 37 added, 0 changed, 0 destroyed.\
\
Outputs:\
\
config-map-aws-auth = <<EOT\
\
\
apiVersion: v1\
kind: ConfigMap\
metadata:\
  name: aws-auth\
  namespace: kube-system\
data:\
  mapRoles: |\
    - rolearn: arn:aws:iam::260176054919:role/terraform-eks-demo-node\
      username: system:node:\{\{EC2PrivateDNSName\}\}\
      groups:\
        - system:bootstrappers\
        - system:nodes\
\
EOT\
kubeconfig = <<EOT\
\
\
apiVersion: v1\
clusters:\
- cluster:\
    server: https://3B0B56BE20EF42383F431D0BFEFE796A.gr7.us-east-1.eks.amazonaws.com\
    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMvakNDQWVhZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeU1EWXlNekExTWpVMU9Gb1hEVE15TURZeU1EQTFNalUxT0Zvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTUFwCkdWa01WaDNrQ0FxcldqUnp4b0NONVhWQUp3MnV5N05VSXVsNUZYUzRCVlk1Z2RhTXFEYWF6QXpsSU41QkxtVkYKL2VZN20vUU9hRHFpZXUrTG04N1ZKaDJQL05maWlqK3FQYVFwZFdMdWVDOWQzRVovN2haUGQ2Nk01RkFmalpBQgpnMHZLd3RaYVliTzNIMDZ4UnUyZkxHdGZzMEhrODBQNVM5cWFEM2dHZ3RzYnMwY3paamxLa2Y2cE1SMmdteHZYCktqSkFyTndBR3RINmpHVVQ4OWhqdnZyMUhWRkM3cmd0L2pkT21VcGMzUVltY0drQVlaQ3lHWnJmcXZSRTVsUWoKY1hJbjJWTTJKVjQyS3FGdkZMOW9qVkEzZ3BjdzJsUjVxcDF4bW8wUUtVcGNNNWlKQ2YwSlA3MkJzY0lHNm9KbgpzOWkyTjd5cFI2ZFJMSzVRTGpzQ0F3RUFBYU5aTUZjd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZHeUlWVytqS1UxOFhUNkdqcUFkZGNWNWlSUmJNQlVHQTFVZEVRUU8KTUF5Q0NtdDFZbVZ5Ym1WMFpYTXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBR1NpUlRLYWFBa1NVM0xKcEF4bApCcU1uZmdCa1QvT1AzVStsd0hadUpNZUhUSWFLZ2xYcjJVbExRaUVPZVFTNmE2Vy9pMXlRT3hrK3NYZDNpTDNnClpza0FsczBvREdScFUwSmVEUU02RElMR2wyNGdCb3d5eW43NmZHTkYyQzZ3NzRZdVhQM0lUWDYzTzhrZmQzUXQKQ3RiQUpwckhGOFdCVUxWczRhR05VQi8yeFRKSmZKLzRna1FEc2wwYyt6WDhRS0lUekdzSE4zaVJTYUlObXh2NQpET3JMYWkySU9LUGZwUllOS0lQaTZ5QUh1TEE4Zm5EaGYxeE5HeVhUQXNyUy94RkNvVXdKajBGZTZHSG1ZUkptCjJGem9ZRnYrVjEwdWIvTzdLL1hqQVB2OHRiSEJCVVVWeXRGKzVwZHRibTk0eVJTNC9RbEdzT01va2ZXTVBhaFIKdVNBPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\
  name: kubernetes\
contexts:\
- context:\
    cluster: kubernetes\
    user: aws\
  name: aws\
current-context: aws\
kind: Config\
preferences: \{\}\
users:\
- name: aws\
  user:\
    exec:\
      apiVersion: client.authentication.k8s.io/v1alpha1\
      command: heptio-authenticator-aws\
      args:\
        - "token"\
        - "-i"\
        - "terraform-eks-demo"\
\
EOT\

\fs32 \cf2 \cb3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf2 (base) Amrits-MacBook-Pro:tf-eks-demo amritsachdev$\
\
\
\
\
\
}